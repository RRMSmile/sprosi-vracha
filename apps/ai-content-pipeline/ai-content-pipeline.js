import fs from "fs";
import path from "path";
import { execSync } from "child_process";
import OpenAI from "openai";

const LOG = "/opt/sprosi-vracha-ai/apps/ai-content-pipeline/pipeline.log";
const DATA_DIR = "/opt/sprosi-vracha-ai/data";
const TRENDS_FILE = `${DATA_DIR}/trends.json`;
const ARTICLES_DIR = `${DATA_DIR}/articles`;
const SITE_URL = "https://sprosi-vracha.com";
const INDEXNOW_KEY = "urohn3hs4k"; // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏
const OPENAI_KEY = process.env.OPENAI_API_KEY || "";

function log(msg) {
  const line = `[${new Date().toISOString()}] ${msg}`;
  console.log(line);
  fs.mkdirSync(path.dirname(LOG), { recursive: true });
  fs.appendFileSync(LOG, line + "\n");
}

function slugify(s) {
  return s
    .toLowerCase()
    .replace(/[—ë]/g, "–µ")
    .replace(/[^a-z0-9–∞-—è\- ]/gi, " ")
    .replace(/\s+/g, "-")
    .replace(/-+/g, "-")
    .replace(/^-|-$/g, "");
}

function saveArticle(slug, title, body) {
  fs.mkdirSync(ARTICLES_DIR, { recursive: true });
  const full = `# ${title}\n\n${body}\n`;
  const file = `${ARTICLES_DIR}/${slug}.md`;
  fs.writeFileSync(file, full);
  log(`üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: ${file}`);
  return file;
}

function pingIndexNow(url) {
  try {
    execSync(
      `curl -s -X POST "https://api.indexnow.org/indexnow?url=${encodeURIComponent(
        url
      )}&key=${INDEXNOW_KEY}"`
    );
    log(`üì° IndexNow ping: ${url}`);
  } catch (e) {
    log(`‚ö†Ô∏è IndexNow –æ—à–∏–±–∫–∞: ${e.message}`);
  }
}

function loadTrends() {
  if (!fs.existsSync(TRENDS_FILE)) {
    log("‚ö†Ô∏è trends.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫");
    return [];
  }
  try {
    const raw = fs.readFileSync(TRENDS_FILE, "utf8");
    const arr = JSON.parse(raw);
    // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —É–±—ã–≤.
    return Array.isArray(arr)
      ? arr.sort((a, b) => (b.priority || 0) - (a.priority || 0))
      : [];
  } catch (e) {
    log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è trends.json: ${e.message}`);
    return [];
  }
}

function fallbackArticle(topic) {
  // –ü—Ä–æ—Å—Ç–æ–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —à–∞–±–ª–æ–Ω –±–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
  return [
    `**–ö—Ä–∞—Ç–∫–æ –æ —Ç–µ–º–µ**`,
    `–¢–µ–º–∞ ¬´${topic}¬ª –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–æ. –ù–∏–∂–µ ‚Äî –±–∞–∑–æ–≤–∞—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.`,
    ``,
    `## –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã`,
    `‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏`,
    `‚Ä¢ –°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å—Ç—Ä–µ—Å—Å, —Ä–µ–∂–∏–º —Å–Ω–∞/–ø–∏—Ç–∞–Ω–∏—è)`,
    `‚Ä¢ –û—à–∏–±–∫–∏ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏`,
    ``,
    `## –ö–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É`,
    `‚Ä¢ –°–∏–º–ø—Ç–æ–º—ã —É—Å–∏–ª–∏–≤–∞—é—Ç—Å—è –∏–ª–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç`,
    `‚Ä¢ –ü–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏`,
    `‚Ä¢ –ï—Å—Ç—å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏–ª–∏ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞`,
    ``,
    `## –ß—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ –¥–µ–ª–∞—Ç—å`,
    `‚Ä¢ –ù–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–∞–º–æ–ª–µ—á–µ–Ω–∏–µ–º –±–µ–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞`,
    `‚Ä¢ –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è`,
    ``,
    `> –í–∞–∂–Ω–æ: —ç—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –æ–±—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ **–Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç** –æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.`,
  ].join("\n");
}

async function generateWithOpenAI(topic) {
  const client = new OpenAI({ apiKey: OPENAI_KEY });

  const prompt = `
–¢—ã ‚Äî –≤—Ä–∞—á –∏ –∞–≤—Ç–æ—Ä –ø–æ—Ä—Ç–∞–ª–∞ "–°–ø—Ä–æ—Å–∏–í—Ä–∞—á–∞". –ù–∞–ø–∏—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —Ç–µ–º—É: "${topic}".
–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1) –í–≤–µ–¥–µ–Ω–∏–µ: –∑–∞—á–µ–º —ç—Ç–æ –∑–Ω–∞—Ç—å.
2) –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã (–±–µ–∑ –¥–∏–∞–≥–Ω–æ–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é).
3) –ö–æ–≥–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É (—á—ë—Ç–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏).
4) –ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ (—Å–∞–º–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, –¥–Ω–µ–≤–Ω–∏–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤).
5) –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å (—á—Ç–æ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å).
6) –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ + –¥–∏—Å–∫–ª–µ–π–º–µ—Ä "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π".
–¢–æ–Ω: —Å–ø–æ–∫–æ–π–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π, –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–µ—á–µ–Ω–∏—è. –û–±—ä—ë–º ~ 600‚Äì900 —Å–ª–æ–≤.
`;

  const res = await client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: prompt }],
    temperature: 0.4,
  });

  const text = res?.choices?.[0]?.message?.content?.trim();
  if (!text) throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏");
  return text;
}

async function writeArticle(topic) {
  const slug = slugify(topic);
  let body;
  if (OPENAI_KEY && !/sk-\.\.\./.test(OPENAI_KEY) && !/–í–ê–®_–ö–õ–Æ–ß/.test(OPENAI_KEY)) {
    try {
      log(`‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI: "${topic}"`);
      body = await generateWithOpenAI(topic);
    } catch (e) {
      log(`‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${e.message}) ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é fallback`);
      body = fallbackArticle(topic);
    }
  } else {
    log("‚ÑπÔ∏è OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback");
    body = fallbackArticle(topic);
  }
  const file = saveArticle(slug, topic, body);
  const url = `${SITE_URL}/articles/${slug}`;
  pingIndexNow(url);
  return { slug, file, url };
}

async function maybeAutopublish() {
  // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –¥–µ—Ä–Ω—É—Ç—å –Ω–∞—à autopublisher:
  // execSync("node /opt/sprosi-vracha-ai/apps/ai-auto-publisher/ai-auto-publisher.js", { stdio: "ignore" });
  // log("üîÅ –í—ã–∑–≤–∞–Ω AI-AutoPublisher");
}

(async () => {
  try {
    log("üöÄ –°—Ç–∞—Ä—Ç AI-Content-Pipeline v2");
    const trends = loadTrends();
    if (trends.length === 0) {
      log("‚ÑπÔ∏è –¢–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º");
      process.exit(0);
    }

    // –í–æ–∑—å–º—ë–º —Ç–æ–ø-3 —Ç–µ–º—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const topics = trends.slice(0, 3).map(t => t.topic);
    log(`üìö –¢–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${topics.length} ‚Üí ${topics.join(" | ")}`);

    for (const t of topics) {
      await writeArticle(t);
    }

    await maybeAutopublish();
    log("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω");
  } catch (e) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: ${e.message}`);
    process.exit(1);
  }
try {
  execSync("node /opt/sprosi-vracha-ai/apps/ai-auto-publisher/ai-auto-publisher.js", { stdio: "ignore" });
  log("üîÅ –í—ã–∑–≤–∞–Ω AI-AutoPublisher");
} catch (e) {
  log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ AI-AutoPublisher: ${e.message}`);
}
})();
