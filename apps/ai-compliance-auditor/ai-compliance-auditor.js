import fs from "fs";
import { execSync } from "child_process";

const LOG = "/opt/sprosi-vracha-ai/apps/ai-compliance-auditor/logs/auditor.log";
const REPORT = "/opt/sprosi-vracha-ai/reports/compliance-report.json";
const SITE = "https://sprosi-vracha.com";

function log(msg) {
  const line = `[${new Date().toISOString()}] ${msg}`;
  console.log(line);
  fs.appendFileSync(LOG, line + "\n");
}

function run(cmd) {
  try {
    return execSync(cmd, { encoding: "utf8" }).trim();
  } catch {
    return "";
  }
}

function fetchPage(url) {
  try {
    return execSync(`curl -sL "${url}"`, { encoding: "utf8" });
  } catch {
    return "";
  }
}

function checkEEAT(html) {
  const eeat = {
    author: html.match(/author/i),
    sources: html.match(/–ò—Å—Ç–æ—á–Ω–∏–∫|–ò—Å—Ç–æ—á–Ω–∏–∫:/i),
    date: html.match(/\d{4}-\d{2}-\d{2}/),
    disclaimer: html.match(/–¥–∏—Å–∫–ª–µ–π–º–µ—Ä|–ù–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π/i),
  };
  const issues = [];
  if (!eeat.author) issues.push("‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∞");
  if (!eeat.sources) issues.push("‚ùå –ù–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤");
  if (!eeat.date) issues.push("‚ùå –ù–µ—Ç –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
  if (!eeat.disclaimer) issues.push("‚ùå –ù–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞");
  return issues.length ? issues : ["‚úÖ E-E-A-T —Å–æ–±–ª—é–¥—ë–Ω"];
}

function checkSchema(html) {
  const hasJSONLD = html.includes("application/ld+json");
  const hasMedicalSchema = html.includes("MedicalWebPage") || html.includes("FAQPage");
  const issues = [];
  if (!hasJSONLD) issues.push("‚ùå –ù–µ—Ç Schema.org JSON-LD");
  if (!hasMedicalSchema) issues.push("‚ö†Ô∏è –ù–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å—Ö–µ–º—ã (MedicalWebPage)");
  return issues.length ? issues : ["‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å"];
}

function checkYMYLContent(html) {
  const sensitive = html.match(/(–ª–µ–∫–∞—Ä—Å—Ç–≤|—Å–∏–º–ø—Ç–æ–º|–ª–µ—á–µ–Ω–∏–µ|–¥–∏–∞–≥–Ω–æ–∑|–∞–Ω–∞–ª–∏–∑|–±–æ–ª–µ–∑–Ω)/i);
  const doctor = html.match(/–≤—Ä–∞—á|–¥–æ–∫—Ç–æ—Ä|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç/i);
  const issues = [];
  if (sensitive && !doctor)
    issues.push("‚ö†Ô∏è –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Ä–∞—á–∞/—ç–∫—Å–ø–µ—Ä—Ç–∞");
  return issues.length ? issues : ["‚úÖ YMYL-–∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ–±–ª—é–¥–µ–Ω—ã"];
}

function auditPage(url) {
  log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);
  const html = fetchPage(url);
  if (!html) return { url, result: ["‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"] };

  const results = [
    ...checkEEAT(html),
    ...checkSchema(html),
    ...checkYMYLContent(html),
  ];

  return { url, result: results };
}

function collectURLs() {
  const sitemap = fetchPage(`${SITE}/sitemap.xml`);
  const urls = sitemap.match(/<loc>(.*?)<\/loc>/g)?.map(u => u.replace(/<\/?loc>/g, "")) || [];
  return urls.slice(0, 20); // –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
}

function main() {
  log("üßæ –ó–∞–ø—É—Å–∫ AI-Compliance-Auditor...");
  const urls = collectURLs();
  log(`üåê –ù–∞–π–¥–µ–Ω–æ ${urls.length} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

  const report = urls.map(auditPage);
  fs.writeFileSync(REPORT, JSON.stringify({ timestamp: new Date(), report }, null, 2));

  const issues = report.flatMap(r => r.result.filter(x => x.startsWith("‚ùå") || x.startsWith("‚ö†Ô∏è")));
  if (issues.length) {
    log(`üö® –ù–∞–π–¥–µ–Ω–æ ${issues.length} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π`);
  } else {
    log("‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º YMYL/E-E-A-T");
  }
}

main();
